name: ECR Deploy

on:
  push:
    branches:
      - main
    paths:
      - "frontend/**"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-v2-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: cd frontend && npm install

      - name: Install Amplify CLI
        run: npm install -g @aws-amplify/cli

      - name: Check Amplify Configuration
        id: check-config
        run: |
          if [ -d "amplify" ]; then
            echo "::set-output name=isConfigured::true"
          else
            echo "::set-output name=isConfigured::false"
          fi
        working-directory: ./frontend

      - name: Configure Amplify
        if: steps.check-config.outputs.isConfigured == 'false'
        run: amplify configure --accessKeyId ${{ secrets.AWS_ACCESS_KEY_ID }} --secretAccessKey ${{ secrets.AWS_SECRET_ACCESS_KEY }} --region ${{ secrets.AWS_REGION }} --yes

      - name: Initialize Amplify
        run: cd frontend && amplify init --yes

      - name: Pull Amplify Changes
        run: cd frontend && amplify pull --yes

      - name: Push Amplify Changes
        run: cd frontend && amplify push --yes

      - name: Build React App
        run: cd frontend && npm run build

      # Build Docker image
      - name: Build Docker image
        run: docker build -t my-react-app:latest ./frontend

      # Authenticate with ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Tag the image for ECR
      - name: Tag Docker image
        run: docker tag frontend-repo:latest ${{ steps.login-ecr.outputs.registry }}/frontend-repo:latest

      # Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: docker push ${{ steps.login-ecr.outputs.registry }}/frontend-repo:latest

      # Additional steps like cache invalidation can be added here if needed
